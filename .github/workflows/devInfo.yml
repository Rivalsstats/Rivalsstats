# This is a basic workflow to help you get started with Actions

name: request Dev diaries

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      BASE_URL: "https://marvelrivalsapi.com/api/v1/"
      API_TOKEN: ${{ secrets.MARVEL_RIVALS_KEY}}
      DEV_DIARIES_URL: "dev-diaries"
      PATCH_NOTES_URL: "patch-notes"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Fetch Dev Diaries
        run: |
          curl -H "x-api-key: ${API_TOKEN}" -X GET "${BASE_URL}${DEV_DIARIES_URL}" \
          -o data/latest/latest_dev_diaries.json 
      - name: Fetch Patch notes
        run: |
          curl -H "x-api-key: ${API_TOKEN}" -X GET "${BASE_URL}${PATCH_NOTES_URL}" \
          -o data/latest/latest_dev_diaries.json 

      - name: Commit and push changes
        run: |
          set -e  # Exit script on any command failure
      
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config pull.rebase true  # Rebase
      
          git add data/
          
          # Commit only if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Updated Dev Diaries"
          fi
      
          # Pull latest changes, fail only on actual errors
          if ! git pull --rebase; then
            echo "Error during git pull" >&2
            exit 1
          fi
      
          # Push changes, fail if there's an actual error
          if ! git push; then
            echo "Error during git push" >&2
            exit 1
          fi
     
